from aiogram.filters import Filter
from aiogram.types import Message

from app.database.CRUDs.select_dialogue import select_dialog
from app.database.CRUDs.select_users import selects_user


class StartSearchFilter(Filter):
    async def __call__(self, message: Message) -> Message | None:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "üöÄ –ü–æ–∏—Å–∫ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞".

        :param message: –û–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ Message.
        :return: –û–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ Message, –ª–∏–±–æ None.
        """

        if message.text == 'üöÄ –ü–æ–∏—Å–∫ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞':
            return message


class StopChatFilter(Filter):
    async def __call__(self, message: Message) -> Message | None:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ "–°—Ç–æ–ø ‚ùå".

        :param message: –û–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ Message.

        :return: –û–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ Message, –ª–∏–±–æ None.
        """

        if message.text == '–°—Ç–æ–ø ‚ùå':
            return message


class SearchFilter(Filter):
    async def __call__(self, message: Message) -> Message | None:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.

        :param message: –û–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ Message.

        :return: –û–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ Message, –ª–∏–±–æ None.
        """

        if await selects_user(message.from_user.id) is None:
            return message


class CharFilter(Filter):
    async def __call__(self, message: Message) -> dict[str, int] | None:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ—Å—Ç–æ—è—Ç –≤ –¥–∏–∞–ª–æ–≥–µ —Å –∫–µ–º-–ª–∏–±–æ.

        :param message: –û–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ Message.

        :return: –û–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ Message, –ª–∏–±–æ None.
        """

        if await select_dialog(message.from_user.id):
            return message


class MessagesFilter(Filter):
    async def __call__(self, message: Message) -> dict[str, int] | None:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ—Å—Ç–æ—è—Ç –≤ –¥–∏–∞–ª–æ–≥–µ —Å –∫–µ–º-–ª–∏–±–æ.

        :param message: –û–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ Message.

        :return: ID —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ (–∞—Ä–≥—É–º–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞), –ª–∏–±–æ None.
        """

        user_id = message.from_user.id
        current_dialog = await select_dialog(user_id)

        companion: int = current_dialog.user_2 ^ current_dialog.user_1 ^ user_id

        return {'companion_id': companion}
